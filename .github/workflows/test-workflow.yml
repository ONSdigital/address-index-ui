name: Python Build and Deploy to Artifact Registry

on:
  push:
    branches: [ "github-action-test-workflow" ]
  pull_request:
    branches: [ "github-action-test-workflow" ]

env:
  IMAGE_NAME: 'my-test-image-aims-ui'
  PROJECT_ID: 'ons-ci-aims'
  AR_REPO_LOCATION: 'europe-west2'
  AR_URL: 'europe-west2-docker.pkg.dev/ons-ci-aims/temp-aims-github-actions'
  WORKLOAD_IDENTITY_PROVIDER: 'projects/709138365636/locations/global/workloadIdentityPools/github-actions-test/providers/github-act-prov-test-aims-ui'

permissions:
  contents: read
  id-token: write


jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5.0.0

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.9'
          cache: 'pip'

      - name: Build
        run: |
          ls -la
          python -m pip install --upgrade pip
          ./scripts/load_templates.sh
          export FLASK_APP=aims_ui;
          export FLASK_ENV=production;
          export SECRET_KEY=secretkey;
          pip install -r requirements.txt;

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:

      - name: Checkout repository
        uses: actions/checkout@v2

      # Install Docker Compose for deploying the API
      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Start the API via Docker Compose
        run: |
          docker-compose -f api_demo/docker-compose.yml up -d
          docker ps -a  # for debugging - shows running containers

      # Wait for API to be ready (checking port 9001) (will return 'hello world' when ready)
      - name: Wait for API to be ready
        run: |
          timeout 340s bash -c 'until curl -s http://localhost:9001; do sleep 5; done'

      # Download and inflate Design System Components
      - name: Download and inflate Design System Components
        run: |
          scripts/load_templates.sh

      # Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements_test.txt

      - name: Install the UI as a python package
        run: |
          pip install -e .

      - name: Install Playwright Browsers
        run: |
          python3 -m playwright install --with-deps

      # Run flask server in "testing" environment
      - name: Run Flask Server
        env:
          FLASK_ENV: testing
        run: |
          python3 wsgi.py &

      # Run Python tests
      - name: Run Python tests
        run: |
          python3 -m pytest tests/pytest_tests -n 4

      # Set up Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'  # Replace with the Node.js version you need

      - name: Install npm dependencies
        run: npm install

      - name: Run JavaScript tests
        run: npm run test:jest

      # Stop Docker Compose and clean up
      - name: Stop and clean up Docker containers
        if: always()
        run: |
          cd api_demo
          docker-compose down

  build-image-push-to-artifact-registry:
    runs-on: ubuntu-latest
    needs: test

    #    permissions:
#      contents: read
#      id-token: write
#    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5.0.0

      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v3'
        with:
          project_id: ${{ env.PROJECT_ID }}
          workload_identity_provider: ${{ env.WORKLOAD_IDENTITY_PROVIDER }}

      - name: Read value from file
        id: read_file
        run: |
          VALUE=$(cat version.txt)
          echo "VALUE=$VALUE" >> $GITHUB_ENV

      - name: Use the value
        run: echo "The value is ${{ env.VALUE }}"

#      - name: Set up Python
#        uses: actions/setup-python@v6
#        with:
#          python-version: '3.9'
#          cache: 'pip'
#
#      - name: Install dependencies
#        run: |
#          ls -la
#          python -m pip install --upgrade pip
#          ./scripts/load_templates.sh
#          export FLASK_APP=aims_ui;
#          export FLASK_ENV=production;
#          export SECRET_KEY=secretkey;
#          pip install -r requirements.txt;

      - name: Configure Docker
        run: |
          gcloud auth configure-docker ${{ env.AR_REPO_LOCATION }}-docker.pkg.dev

      - name: Build Docker image
        run: |
          docker build -t "${{ env.AR_URL }}/${{ env.IMAGE_NAME }}:${{ env.VALUE }}" .
          docker build -t "${{ env.AR_URL }}/${{ env.IMAGE_NAME }}:latest" .

      - name: Push Docker image
        run: |
          docker push "${{ env.AR_URL }}/${{ env.IMAGE_NAME }}" --all-tags
