{% macro customClericalData(params) %}

{% from "components/collapsible/_macro.njk" import onsCollapsible %}
{% from "components/table/_macro.njk" import onsTable %}
{% from "components/panel/_macro.njk" import onsPanel %}

<br>
{% call onsPanel({
        "type": 'warn'
    })
%}
   Hover your cursor over the "Name" field to see descriptions
{% endcall %}

{# By setting the content, the onsTable is contained inside onsCollapsible #}


 {% set content %}
        {{ onsTable({
        "caption": "Clerical Information",
        "variants": ['row-hover', 'sortable'],
	"sortBy": "Sort by",
        "ariaAsc": "ascending",
        "ariaDesc": "descending",

        "id": "clerical-data-table",
        "ths": params.clerical_info.get('ths'),
        "trs": params.clerical_info.get('trs'),
	}) }}

    {% endset %}

    {% call onsCollapsible({
            'id': "collapsible",
            'title': "Show Clerical Information",
            'titleTag': "h2",
            'button': {
                "close": "Hide this",
                "contextSuffix": "content"
            }
        })
    %}
        {{ content | safe }}
    {% endcall %}

<script>
// ADD FAVOURITE OPTION ROW
function getName(row) {
  const firstCell = row.children[0]; 
  return firstCell.textContent.replace(/\s/g,''); 
}
function getFavourites() {
  const favs = localStorage.getItem('favourites');
  if (favs) {
    return JSON.parse(favs);
  } else {
    localStorage.setItem('favourites', JSON.stringify({}));
    return {};
  }
}

function toggleFavourite(row, cell) {
  const favouriteStatus = getFavouriteStatus(row, cell);
  const favourites = getFavourites();
  const name = getName(row);
  if (favourites[name]) {
    favourites[name] = !favourites[name];
  } else {
    favourites[name] = true;
  }
  localStorage.setItem('favourites', JSON.stringify(favourites));
  setFavouriteStar(row, cell);
}

function getFavouriteStatus(row, cell) {
  const name = getName(row);
  const favourites = getFavourites();
  const favSetting = favourites[name];
  if (favSetting) {
    return true;
  } else {
    return false;
  }
}

function setFavouriteStar(row, cell) {
  if (getFavouriteStatus(row, cell)) {
      // Note innerHTML is just the worst and should be removed at some point
    cell.innerHTML = '★';
  } else {
    cell.innerHTML = '☆';
  }
}

function addFavouritesColumn() {
  let count = 0;
  for (const [i, row] of [...document.querySelectorAll('#clerical-data-table tr')].entries()) {
    const cell = document.createElement(i ? "td" : "th");

    if (count === 0) {
      cell.classList.add('ons-table__header');
      cell.textContent='Favourite';
      cell.scope = 'col';
    } else {
      cursorPointer(cell);
      cell.classList.add('ons-table__cell');
      setFavouriteStar(row, cell);
      cell.addEventListener('click', function(){toggleFavourite(row, cell)}, false);
    }
    
    row.appendChild(cell);
    count = count + 1;
  };
}

addFavouritesColumn();

// ADD TOOLTIPS
function cleanAndFormat(toClean) {
  clean = toClean.replace(/\s/g, "");
  clean = clean.toLowerCase();
  clean = clean.replace('[paf]','');
  clean = clean.replace('[nag]','');
  return clean;
}

function cursorPointer(elm) {
  elm.style = ' cursor: pointer; ';
}

// Add tooltips to the above table
const ttd = {{params.tool_tip_data}};
for (const x of ttd) {
//  console.log(x);
  let i = 9;
}

const table_elms = document.querySelectorAll('.ons-table__cell');

for (const elm of table_elms) {
  let tableCellClean = cleanAndFormat(elm.textContent);

  for (const toolTip of ttd) {
    const toolTipClean = cleanAndFormat(toolTip.name);
    if ( tableCellClean === toolTipClean ) {
      elm.title = toolTip.description;
      cursorPointer(elm);
    } 
  }
}


</script>

{% endmacro %}
