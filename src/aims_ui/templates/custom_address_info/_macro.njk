{% macro customAddressInfo(params) %}
{% from 'components/label/_macro.njk' import onsLabel %}
{% from 'custom_clerical_data/_macro.njk' import customClericalData %}

{% if params.full_info %}

<h1 class="saturn"> {{ params.matched_addresses[0].formatted_address.value }}</h1>

<div class="panel panel--info panel--no-title ">
  <span class="u-vh">Important information: </span>
  <div class="panel__body">
    <p>

      
<table id="overviewTable"> <tbody>
{# For each atribute in the Address Model #} 
{% for attribute_name, address_attribute in  params.matched_addresses[0].__dict__.items() %}

	{% if address_attribute.full_show %}
		<tr><td class="mars">{{ attribute_name }}</td>
		    <td class="venus">{{ address_attribute.value }}</td>
		</tr>
	{% endif %}

	{# If the address is the "NAG" response (contains a NAG Model) #} 
	{% if attribute_name == 'nag' %}
		{% for nag_attribute_name, nag_attribute_value in  address_attribute.value.__dict__.items() %}
		{% if nag_attribute_name in address_attribute.value.full_values_to_show %}
			<tr><td class="mars">{{nag_attribute_name}}</td>
			    <td class="venus">{{ nag_attribute_value.value }}</td>
			</tr>
		{% endif %}
	{% endfor %}
	{% endif %}

	{# If the address is the "PAF" response (contains a PAF Model) #} 
	{% if attribute_name == 'paf' %}
		{% for paf_attribute_name, paf_attribute_value in  address_attribute.value.__dict__.items() %}
		{% if paf_attribute_name in address_attribute.value.full_values_to_show %}
			<tr><td class="mars">{{paf_attribute_name}}</td>
			    <td class="venus">{{ paf_attribute_value.value }}</td>
			</tr>
		{% endif %}
	{% endfor %}
	{% endif %}

{% endfor %}
<tr>
    <td class="mars"><a href=" {{ 'https://maps.google.com/?q=' + params.matched_addresses[0].geo.value.get('latitude') + ',' + params.matched_addresses[0].geo.value.get('longitude') + '&ll=' + params.matched_addresses[0].geo.value.get('latitude') + ',' + params.matched_addresses[0].geo.value.get('longitude') + '&z=18'  }}"
    >Location Map</a></td>
</tr>
</tbody> </table>

    </p>
  </div></div>

{# Add Custom Clerical Data (almost full result, to be hidden by accordion #} 
{{ customClericalData({
	'clerical_info': params.clerical_info,
	'tool_tip_data': params.tool_tip_data,
	'link_data': params.link_data,
	} ) }} 

{# Add back the Confidence Score and the Underlying Score #} 
<script>

function getCellFromTable(table, rowText) {
  const rows = table.getElementsByTagName('tr');
  for (let i = 0; i < rows.length; i++) {
    const cells = rows[i].getElementsByTagName('td');
    for (let j = 0; j < cells.length; j++) {
      if ( String(cells[j].textContent).includes(rowText) ) {
        return cells[j];
      }
    }
  }
  return null;
}

function getSecondCell(row) {
  const cells = row.querySelectorAll('td');
  if (cells.length >= 2) {
    return cells[1];
  } else {
    return null;
  }
}

function getConfidenceList() {
  const defaultConfidence = [];
  const confidenceScores = localStorage.getItem('confidenceScores');
  if (confidenceScores) {
    return JSON.parse(confidenceScores);
  } else {
    localStorage.setItem('confidenceScores', JSON.stringify(defaultConfidence));
  return [];
  }
}

window.onload = function() {
  const overviewTable = document.querySelector('#overviewTable');

  const confidenceScoreLabelCell = getCellFromTable(overviewTable, 'formatted_confidence_score');
  const confidenceScoreValueCell = confidenceScoreLabelCell.nextElementSibling;

  const uprnCellLabel = getCellFromTable(overviewTable, 'uprn');
  const uprnRow = uprnCellLabel.parentNode;
  const uprnCell = getSecondCell(uprnRow);
  const uprn = uprnCell.textContent;

  // Populate the "Important information" overview table 
  const confidenceList = getConfidenceList();
  for (const score of confidenceList) {
    if (String(score.uprn) === String(uprn)) {
      const newConScoreValue = Math.round(score.confidenceScore * 100) / 100
      confidenceScoreValueCell.textContent = String(newConScoreValue) + '% Match';
    }
  }

  // Populate the "Clerical Data" table for confidence and underlying score
  const clericalDataTable = document.querySelector('#clerical-data-table');

  const confidenceScoreValueCellClericalData = getCellFromTable(clericalDataTable, 'confidence_score');
  const underlyingScoreValueCellClericalData = getCellFromTable(clericalDataTable, 'underlying_score');

  // Get parent Rows
  const conScoreClericalData          = confidenceScoreValueCellClericalData.parentNode; 
  const underlyingScoreClericalData   = underlyingScoreValueCellClericalData.parentNode; 

  const conScoreClericalDataCell        = getSecondCell(conScoreClericalData);
  const underlyingScoreClericalDataCell = getSecondCell(underlyingScoreClericalData);

  for (const score of confidenceList) {
    if (String(score.uprn) === String(uprn)) {
      conScoreClericalDataCell.textContent = score.confidenceScore;
      underlyingScoreClericalDataCell.textContent = score.underlyingScore;
    }
  }

};

</script>


{% else %}



{% if params.compressed_view == True %}
  {# Compressed view only includes the name, geo and "distance" for the radius search page #}

  <table class="address-table">
    <thead>
      <tr>
        <th>Name</th>
        <th>Latitude</th>
        <th>Longitude</th>
        <th>Distance</th>
      </tr>
    </thead>
    <tbody>
      {% for address in params.matched_addresses %}
        <tr>
          <td>{{ address.formatted_address.value }}</td>
          <td>{{ address.geo.value.latitude }}</td>
          <td>{{ address.geo.value.longitude}}</td>
          <td>4</td>
        </tr>
      {% endfor %}
    </tbody>
  </table>

{% else %}
  {# Add the smaller cards, used on the overview when a search is done #}
  {% for address in params.matched_addresses %}

    <article class="result-short-form">
      <a href={{'/address_info/' + address.uprn.value }}>

      <h2 hidden id="formattedAddress" class="saturn address-titles"> 
        {{ address.formatted_address.value }} </h2>

      <h2 hidden id="formattedAddressNag" class="saturn address-titles"> 
        {{ address.formatted_address_nag.value }} </h2>

      <h2 hidden id="formattedAddressPaf" class="saturn address-titles"> 
        {{ address.formatted_address_paf.value }} </h2>
      </a>
          <table class='clerical-data-table'> <tbody id='{{address.uprn.value}}'>

    {% for attribute_name, address_attribute in address.__dict__.items() %}
    {% if address_attribute.show %}
      <tr><td class="mars">{{ attribute_name }}</td>
          <td class="venus">{{ address_attribute.value }}</td>
      </tr>
    {% endif %}
    {% endfor %}
    <tbody> </table>
    {#https://stackoverflow.com/questions/32806084/google-map-zoom-parameter-in-url-not-working#}
        <p class="mars"><a href=" {{ 'https://maps.google.com/?q=' + address.geo.value.get('latitude') + ',' + address.geo.value.get('longitude') + '&ll=' +  address.geo.value.get('latitude') + ',' + address.geo.value.get('longitude') + '&z=18' +'&basemap=satellite' }}"
        >Location Map</a></p>
    </article>

  {% endfor %}
{% endif %}





<script>
  function getFavourites() {
    const defaultFavs = {"uprn":true,"classification_code":true,"classification_code_list":true,"lpi_logical_status":true};
    const favs = localStorage.getItem('favourites');
    if (favs) {
      return JSON.parse(favs);
    } else {
      localStorage.setItem('favourites', JSON.stringify(defaultFavs));
      return {};
    }
  }

  function getConfidenceList() {
    const defaultConfidence = [];
    const confidenceScores = localStorage.getItem('confidenceScores');
    if (confidenceScores) {
      return JSON.parse(confidenceScores);
    } else {
      localStorage.setItem('confidenceScores', JSON.stringify(defaultConfidence));
      return [];
    }
  }

  function confidenceScoreAlreadyAdded(objectToAdd, confidenceScores) {
    for (const conScore of confidenceScores) {
      if (conScore.uprn === objectToAdd.uprn) {
        return true;
      } 
    }
    return false;
  }

  function addToConfidenceScore(objectToAdd) {
    const confidenceScores = getConfidenceList();
    // Check that it's not already added
    if (confidenceScoreAlreadyAdded(objectToAdd, confidenceScores)) {
      const x = 'var';
    } else {
      confidenceScores.push(objectToAdd);
      localStorage.setItem('confidenceScores', JSON.stringify(confidenceScores));
    }
  }



  const localFavourites = getFavourites();
  function getLocalFav(name) {
    if (localFavourites[name] === true) {
      return true
    } else {
      return false
    }
  }
  const addresses = {};
  const address = {};
  const paf = {};
  const nag = {};
  let x = {};
</script>

<script>
let confidenceScoreList = {};
localStorage.setItem('confidenceScores', []);
</script>

{% for address in params.matched_addresses %}
	{% for attribute_name, address_attribute in address.__dict__.items() %}
    <script> 
      address['{{attribute_name}}'] = {value:`{{address_attribute.value}}`,
                favourite: getLocalFav('{{attribute_name}}')};


      // Add the UPRN and Confidence Score and underlying score to Local Storage
      if (`{{attribute_name}}` === 'uprn') {
	confidenceScoreList = {};
      	confidenceScoreList['uprn'] = `{{address_attribute.value}}` ;
      }
      if (`{{attribute_name}}` === 'confidence_score') {
      	confidenceScoreList['confidenceScore'] = `{{address_attribute.value}}` ;
      }
      if (`{{attribute_name}}` === 'underlying_score') {
      	confidenceScoreList['underlyingScore'] = `{{address_attribute.value}}` ;
	addToConfidenceScore(confidenceScoreList);
      }


    </script>

    {# PAF AND NAG EXCEPTIONS #}
      {% if attribute_name == 'paf'  %}
        {% for paf_attribute_name, paf_attribute_value in address_attribute.value.__dict__.items() %}
          <script>
            address['[paf]{{paf_attribute_name}}'] = {value:`{{paf_attribute_value.value}}`,
                 favourite: getLocalFav('[paf]{{paf_attribute_name}}')}; 
          </script>
         {% endfor %}
      {% endif %}

      {% if attribute_name == 'nag'  %}
        {% for nag_attribute_name, nag_attribute_value in address_attribute.value.__dict__.items() %}
          <script>
            address['[nag]{{nag_attribute_name}}'] = {value:`{{nag_attribute_value.value}}`,
                 favourite: getLocalFav('[nag]{{nag_attribute_name}}')}; 
          </script>
         {% endfor %}
      {% endif %}

      <script>
        if ('{{attribute_name}}' === 'paf') {
          address['[paf]{{attribute_name}}'] = {...paf};
        }
        if ('{{attribute_name}}' === 'nag') {
          address['[nag]{{attribute_name}}'] = {...nag};
        }
      </script>
    {# END PAF AND NAG EXCEPTIONS #}

  {% endfor %}
  <script>
    copyOfAddress = {...address};
    addresses[`{{address.uprn.value}}`] = copyOfAddress;
  </script>

{% endfor %}

{# Script to add the favourite attributes below each address #}
<script type=module src="static/js/macros/custom_address_info/add_and_set_favourites.mjs"></script>

{% endif %}


{# Add styles that create gaps between cards #}
<link rel="stylesheet" href="/static/css/custom_macros/custom_address_info.css">

{% endmacro %}
