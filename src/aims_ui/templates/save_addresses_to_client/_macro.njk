{% macro customAddressInfo(params) %}

{# This macro is designed only to save the address information to local storage, not generate components #}





{% if params.compressed_view == True %}
  {# Compressed view only includes the name, geo and "distance" for the radius search page #}

  <table class="address-table ons-table">
    <thead class="ons-table__head">
      <tr class="ons-table__row">
        <th class="ons-table__header"><span class="ons-table__header-text">Name</span></th>
        <th class="ons-table__header"><span class="ons-table__header-text">Latitude</span></th>
        <th class="ons-table__header"><span class="ons-table__header-text">Longitude</span></th>
        <th class="ons-table__header"><span class="ons-table__header-text">Distance</span></th>
      </tr>
    </thead>
    <tbody class="ons-table__body">
      {% for address in params.matched_addresses %}
        <tr class="ons-table__row">
          <td class="ons-table__cell">
          <a href="/address_info/{{ address.uprn.value }}">
            {{ address.formatted_address.value }}
          </a></td>
          <td class="ons-table__cell">{{ address.geo.value.latitude }}</td>
          <td class="ons-table__cell">{{ address.geo.value.longitude}}</td>
          <td class="distance_attribute ons-table__cell" 
            myLat="{{ address.geo.value.latitude}}"
            myLon="{{ address.geo.value.longitude}}"
            >NA</td>
        </tr>
      {% endfor %}
    </tbody>
  </table>

  {# Script to populate the table above with previous results ONLY if it's not a results page #}
  {% if params.results_page != True %}
    <script type=module src="static/js/macros/custom_address_info/load_previous_values.mjs"></script>
  {% endif %}

  {# Script that will populate the "Distance" value #}
  <script type=module src="static/js/macros/custom_address_info/distance_calculator.mjs"></script>

  {# Add the addresses matched into localStorage so they can be accessed by js elsewhere #}
  {# Only Run this script if it's a results page (i.e there are new results!) #}
  {% if params.results_page == True %}
    <script type="module">
      import { getPageLocalValues, setPageLocalValues } from '/static/js/f_helpers/local_storage_page_helpers.mjs';

      const matchedAddresses = []
      function addAddressToLargeList(addressInfo) {
        // Given a single address, add it to the array of addresses in js
        matchedAddresses.push(addressInfo);
      }

      {% for address in params.matched_addresses %}
        addAddressToLargeList({
          uprn: {{ address.uprn.value | tojson }},
          name: {{ address.formatted_address.value | tojson }},
          longitude: {{ address.geo.value.longitude | tojson }},
          latitude: {{ address.geo.value.latitude  | tojson }},
          confidenceScore: {{ address.confidence_score.value | tojson }},
          underlyingScore: {{ address.underlying_score.value | tojson }},
        });
      {% endfor %}

      setPageLocalValues('radiussearch', {radiusSearchMostRecentAddresses: matchedAddresses} )

      // Temporarily - until entire file is upgraded to use the new local storage method
      // Add the uprn and confidence score to the "confidenceScores" local storage

      let confidenceScoreList = []

      function addConfidencePairList(address) {
        // Add to the confidenceScoreList
        const justUprnAndConfidenceScores = {
            uprn: address.uprn,
            confidenceScore: address.confidenceScore,
            underlyingSCore: address.underlyingScore,
          }
        confidenceScoreList.push(justUprnAndConfidenceScores);
      }

      for (const address of matchedAddresses) {
        addConfidencePairList(address);
      }

      localStorage.setItem('confidenceScores', JSON.stringify(confidenceScoreList));

    </script>
  {% endif %}
  
{% else %}
  {# Add the smaller cards, used on the overview when a search is done #}
  {% for address in params.matched_addresses %}

    <article class="result-short-form">
      <a href={{'/address_info/' + address.uprn.value }}>

      <h2 hidden id="formattedAddress" class="saturn address-titles"> 
        {{ address.formatted_address.value }} </h2>

      <h2 hidden id="formattedAddressNag" class="saturn address-titles"> 
        {{ address.formatted_address_nag.value }} </h2>

      <h2 hidden id="formattedAddressPaf" class="saturn address-titles"> 
        {{ address.formatted_address_paf.value }} </h2>
      </a>
          <table class='clerical-data-table'> <tbody id='{{address.uprn.value}}'>

    {% for attribute_name, address_attribute in address.__dict__.items() %}
    {% if address_attribute.show %}
      <tr><td class="mars">{{ attribute_name }}</td>
          <td class="venus">{{ address_attribute.value }}</td>
      </tr>
    {% endif %}
    {% endfor %}
    <tbody> </table>
    {#https://stackoverflow.com/questions/32806084/google-map-zoom-parameter-in-url-not-working#}
        <p class="mars"><a href=" {{ 'https://maps.google.com/?q=' + address.geo.value.get('latitude') + ',' + address.geo.value.get('longitude') + '&ll=' +  address.geo.value.get('latitude') + ',' + address.geo.value.get('longitude') + '&z=18' +'&basemap=satellite' }}"
        >Location Map</a></p>
    </article>

  {% endfor %}
{% endif %}



<script>
  function getFavourites() {
    const defaultFavs = {"uprn":true,"classification_code":true,"classification_code_list":true,"lpi_logical_status":true};
    const favs = localStorage.getItem('favourites');
    if (favs) {
      return JSON.parse(favs);
    } else {
      localStorage.setItem('favourites', JSON.stringify(defaultFavs));
      return {};
    }
  }

  function getConfidenceList() {
    const defaultConfidence = [];
    const confidenceScores = localStorage.getItem('confidenceScores');
    if (confidenceScores) {
      return JSON.parse(confidenceScores);
    } else {
      localStorage.setItem('confidenceScores', JSON.stringify(defaultConfidence));
      return [];
    }
  }

  function confidenceScoreAlreadyAdded(objectToAdd, confidenceScores) {
    for (const conScore of confidenceScores) {
      if (conScore.uprn === objectToAdd.uprn) {
        return true;
      } 
    }
    return false;
  }

  function addToConfidenceScore(objectToAdd) {
    const confidenceScores = getConfidenceList();
    // Check that it's not already added
    if (confidenceScoreAlreadyAdded(objectToAdd, confidenceScores)) {
      const x = 'var';
    } else {
      confidenceScores.push(objectToAdd);
      localStorage.setItem('confidenceScores', JSON.stringify(confidenceScores));
    }
  }

  const localFavourites = getFavourites();
  function getLocalFav(name) {
    if (localFavourites[name] === true) {
      return true
    } else {
      return false
    }
  }
  const addresses = {};
  const address = {};
  const paf = {};
  const nag = {};
  let x = {};
</script>

<script>
let confidenceScoreList = {};
localStorage.setItem('confidenceScores', []);
</script>

{% for address in params.matched_addresses %}
	{% for attribute_name, address_attribute in address.__dict__.items() %}
    <script> 
      address['{{attribute_name}}'] = {value:`{{address_attribute.value}}`,
                favourite: getLocalFav('{{attribute_name}}')};


      // Add the UPRN and Confidence Score and underlying score to Local Storage
      if (`{{attribute_name}}` === 'uprn') {
	confidenceScoreList = {};
      	confidenceScoreList['uprn'] = `{{address_attribute.value}}` ;
      }
      if (`{{attribute_name}}` === 'confidence_score') {
      	confidenceScoreList['confidenceScore'] = `{{address_attribute.value}}` ;
      }
      if (`{{attribute_name}}` === 'underlying_score') {
      	confidenceScoreList['underlyingScore'] = `{{address_attribute.value}}` ;
	addToConfidenceScore(confidenceScoreList);
      }


    </script>

    {# PAF AND NAG EXCEPTIONS #}
      {% if attribute_name == 'paf'  %}
        {% for paf_attribute_name, paf_attribute_value in address_attribute.value.__dict__.items() %}
          <script>
            address['[paf]{{paf_attribute_name}}'] = {value:`{{paf_attribute_value.value}}`,
                 favourite: getLocalFav('[paf]{{paf_attribute_name}}')}; 
          </script>
         {% endfor %}
      {% endif %}

      {% if attribute_name == 'nag'  %}
        {% for nag_attribute_name, nag_attribute_value in address_attribute.value.__dict__.items() %}
          <script>
            address['[nag]{{nag_attribute_name}}'] = {value:`{{nag_attribute_value.value}}`,
                 favourite: getLocalFav('[nag]{{nag_attribute_name}}')}; 
          </script>
         {% endfor %}
      {% endif %}

      <script>
        if ('{{attribute_name}}' === 'paf') {
          address['[paf]{{attribute_name}}'] = {...paf};
        }
        if ('{{attribute_name}}' === 'nag') {
          address['[nag]{{attribute_name}}'] = {...nag};
        }
      </script>
    {# END PAF AND NAG EXCEPTIONS #}

  {% endfor %}
  <script>
    copyOfAddress = {...address};
    addresses[`{{address.uprn.value}}`] = copyOfAddress;
  </script>

{% endfor %}

{# Script to add the favourite attributes below each address #}
<script type=module src="static/js/macros/custom_address_info/favourites_star_and_local_storage.mjs"></script>

{# Add styles that create gaps between cards #}
<link rel="stylesheet" href="/static/css/custom_macros/custom_address_info.css">

{% endmacro %}
